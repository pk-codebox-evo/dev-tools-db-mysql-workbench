
# This is the SPEC file to build RPM packages for MySQL Workbench
# 
# To use this file, you should define several macros when calling
# rpmbuild, in order to specify the edition, version and release
# numbers of the current build.
#
# Here's a usage example:
# rpmbuild -ba mysql-workbench.spec --target=`arch` \
#                                   --define='edition community' \
#                                   --define='version 6.3.9' \
#                                   --define='release 1'
####################################################################

# Enable use of "--with" and "--without" options to "rpmbuld"
#
# NOTE: If giving "--with paramiko" our own bundled paramiko is used,
# else the system one is use (a bit misleading option name)
#
# NOTE: Currently 'mysql_static' just means we don't copy
# "libmysqlclient.so*", a newer version of FindMySQL is needed to
# actually force the use of the "libmysqlclient.a" library.
# I.e. the -DMYSQLCLIENT_STATIC_LINKING:BOOL=TRUE below has currently
# no effect (instead you need to remove the shared libraries from the
# MySQL install)
%bcond_with paramiko
%bcond_without mysql_static

# Allow to continue when a binary with no build-id was found
%undefine _missing_build_ids_terminate_build

%if !%{defined version}
%define version         @VERSION@
%endif

# whether at least Python 2.6 is available
%define have_python26   1
%include %{_rpmconfigdir}/macros.python

# FIXME change so that if not defined, this is a build building
# against RPM installed libraries
%if !%{defined linuxres_binaries}
%define linuxres_binaries %{linuxres_home}/builds
%endif

%if "%{edition}" == "commercial"
%define commercial       1
%define lictag           com
%define license_type     Commercial
%define license_file     LICENSE.mysql
%else
%define community        1
%define lictag           gpl
%define edition          community
%define license_type     GPLv2
%define license_file     COPYING
%endif

%define odbc_home        %{linuxres_binaries}/odbc
%define sqlite_dir       %{linuxres_binaries}/sqlite-%{lictag}
%define pysqlite_dir     %{linuxres_binaries}/pysqlite2-%{lictag}
%define pyodbc_dir       %{linuxres_binaries}/pyodbc
%define mysqlcppconn_dir %{linuxres_binaries}/cppconn-%{lictag}
%define gdal_dir         %{linuxres_binaries}/gdal-%{lictag}
%define vsqlite_dir      %{linuxres_binaries}/vsqlite-%{lictag}
%define python_dir       %{linuxres_home}/python
%define antlr_jar_path   %{linuxres_home}/bin/antlr-3.4-complete.jar
%define boost_root       %{linuxres_home}

Summary: A MySQL visual database modeling, administration, development and migration tool
Name   : mysql-workbench-%{edition}
Version: %{version}
Release: %{release}%{?dist}
Group  : Applications/Databases
Vendor : Oracle Corporation
License: %{license_type}
URL    : http://wb.mysql.com
Source : %{name}-%{version}-src.tar.gz

BuildRoot    : %{_tmppath}/%{name}-%{version}-root

BuildRequires: pcre-devel >= 3.9
BuildRequires: cmake >= 2.8
BuildRequires: libzip-devel libxml2-devel
BuildRequires: python-devel >= 2.6
BuildRequires: gtk3-devel
BuildRequires: gtkmm30-devel
BuildRequires: mesa-libGL-devel
BuildRequires: make
BuildRequires: tar
BuildRequires: gcc-c++
BuildRequires: swig >= 1.3
BuildRequires: proj-devel

%if !%{defined mysql_home}
BuildRequires: mysql-devel >= 5.7
%endif

%if !%{defined linuxres_binaries}
BuildRequires: boost-devel
BuildRequires: sqlite-devel
BuildRequires: vsqlite++-devel
%endif

%if 0%{?fedora} >= 18
BuildRequires: libgnome-keyring-devel libuuid-devel
%else
BuildRequires: gnome-keyring-devel
%endif

Provides: mysql-workbench = %{version}-%{release}
Provides: mysql-workbench%{?_isa} = %{version}-%{release}
Requires: libzip
%if %{without paramiko}
Requires: python-paramiko >= 1.15.1
%endif
Requires: gnome-keyring
Requires: proj
Requires: glib2 >= 2.28
Requires: gtk3
Requires: gtkmm30
Requires: python2-crypto

# our old package names
Obsoletes: mysql-workbench < 7.0
Conflicts: mysql-workbench-oss
Conflicts: mysql-workbench-com-se
Conflicts: mysql-workbench-gpl

%if 0%{?commercial}
Obsoletes: mysql-workbench-com-se < 7.0
Conflicts: mysql-workbench-community
%else
Obsoletes: mysql-workbench-oss < 7.0
Obsoletes: mysql-workbench-gpl < 7.0
Conflicts: mysql-workbench-commercial
%endif


# Filtering: https://fedoraproject.org/wiki/Packaging:AutoProvidesAndRequiresFiltering (from EL7)
# FIXME if using system installs of one of these, this list is not correct
%global __requires_exclude ^lib(antlr3c_wb|cdbc|gdal|grt|iodbc|iodbcadm|iodbcinst|linux_utilities|mdcanvas|mdcanvasgtk|mforms|mysqlcppconn|parsers|sqlide|sqlite3|sqlparser|vsqlitepp|wbbase|wbprivate|wbpublic|wbscintilla|mtemplate)\\.so.*$
%global __provides_exclude_from ^(%{_libdir}/mysql.workbench/.*\\.so.*)$


%description
MySQL Workbench is a unified visual tool for database architects, developers, 
and DBAs. MySQL Workbench provides data modeling, SQL development, and 
comprehensive administration tools for server configuration, user 
administration, backup, and much more. MySQL Workbench is available on 
Windows, Linux and Mac OS X.


%prep

if [ -z "%{?linuxres_home}" ] ; then
  echo "ERROR: You need to run like: rpmbuild --define 'linuxres_home <path-to-res-repo>' ..."
  exit 1
fi

# Add the -D flag if you don't want to delete the source root on each build
%setup -q -n %{name}-%{version}-src


%build
export ANTLR_JAR_PATH=%{antlr_jar_path}
export BOOST_ROOT=%{boost_root}
%if 0%{?fedora} > 22
CXXFLAGS="-std=c++11 $CXXFLAGS" \
%undefine _hardened_build #need to undefine because of some memory problems
%endif
# CMAKE_INSTALL_PREFIX etc is handled by the cmake macro
%cmake -DCMAKE_BUILD_TYPE=Release \
       -DREAL_EXECUTABLE_DIR=%{_libexecdir}/mysql-workbench \
%if %{defined mysql_home}
       -DMySQL_CONFIG_PATH=%{mysql_home}/bin/mysql_config \
       -DUSE_BUNDLED_MYSQLDUMP=1 \
%endif
%if %{with mysql_static}
       -DMYSQLCLIENT_STATIC_LINKING:BOOL=TRUE \
%endif
       -DMySQLCppConn_LIBRARIES="-L%{mysqlcppconn_dir}/lib -lmysqlcppconn" \
       -DMySQLCppConn_INCLUDE_DIR=%{mysqlcppconn_dir}/include \
       -DIODBC_CONFIG_PATH=%{odbc_home}/bin/iodbc-config \
       -DIODBC_INCLUDE_PATH=%{odbc_home}/include \
       -DIODBC_LIBRARIES_PATH=%{odbc_home}/lib \
       -DGDAL_INCLUDE_DIR=%{gdal_dir}/include \
       -DGDAL_LIBRARY=%{gdal_dir}/lib/libgdal.so \
       -DVSQLITE_INCLUDE_DIR=%{vsqlite_dir}/include \
       -DVSQLITE_LIBRARIES="-L%{vsqlite_dir}/lib -lvsqlitepp"

make %{?_smp_mflags}


%install
make install DESTDIR=%{buildroot}
rm -fr %{buildroot}/usr/share/doc/mysql-workbench

# Bundle client programs and lib
%if %{defined mysql_home}
%if %{without mysql_static}
  cp -a %{mysql_home}/lib/libmysqlclient.so.* %{buildroot}%{_libdir}/mysql-workbench/
%endif
  cp -a %{mysql_home}/bin/mysql %{buildroot}%{_libexecdir}/mysql-workbench/
  cp -a %{mysql_home}/bin/mysqldump %{buildroot}%{_libexecdir}/mysql-workbench/
%endif

#
# Don't bundle libzip.so. Those can be found in EPEL.
#
#%%if 0%%{?rhel}
#  cp -a /usr/lib64/libzip.so* %%{buildroot}%%{_libdir}/mysql-workbench/
#%%endif

find %{buildroot}%{_libdir}/mysql-workbench -name \*.a  -exec rm {} \; -print
find %{buildroot}%{_libdir}/mysql-workbench -name \*.la -exec rm {} \; -print

%if %{defined linuxres_binaries}
  # Bundle pre-built libs
  cp -a %{pyodbc_dir}                                 %{buildroot}%{_libdir}/mysql-workbench/modules/
  cp -a %{pysqlite_dir}                               %{buildroot}%{_libdir}/mysql-workbench/modules/
  cp -a %{sqlite_dir}/lib/*.so*                       %{buildroot}%{_libdir}/mysql-workbench/
  cp -a %{gdal_dir}/lib/*.so*                         %{buildroot}%{_libdir}/mysql-workbench/
  cp -a %{mysqlcppconn_dir}/lib/libmysqlcppconn.so*   %{buildroot}%{_libdir}/mysql-workbench/
# Note that MySQL Shell only provide static libraries at the moment,
# i.e. is linked into the WB binaries
# cp -a %%{mysqlshell_dir}/lib/*.so*                  %%{buildroot}%%{_libdir}/mysql-workbench/
  cp -a %{vsqlite_dir}/lib/libvsqlitepp.so*           %{buildroot}%{_libdir}/mysql-workbench/
  cp -a %{odbc_home}/lib/libiodbc{,inst,adm}.so*      %{buildroot}%{_libdir}/mysql-workbench/
  cp -a %{odbc_home}/bin/iodbcadm-gtk                 %{buildroot}%{_libexecdir}/mysql-workbench/
%if %{with paramiko}
  cp -a %{python_dir}/paramiko %{python_dir}/ecdsa    %{buildroot}%{_libdir}/mysql-workbench/modules/
%endif
%endif


%post
touch --no-create %{_datadir}/icons/hicolor || :
if [ -x %{_bindir}/gtk-update-icon-cache ]; then
   %{_bindir}/gtk-update-icon-cache --quiet %{_datadir}/icons/hicolor || :
fi

if [ -x %{_bindir}/update-desktop-database ]; then
    %{_bindir}/update-desktop-database
fi

if [ -x %{_bindir}/update-mime-database ]; then
    %{_bindir}/update-mime-database %{_datadir}/mime 2>&1 > /dev/null || :
fi


%postun
touch --no-create %{_datadir}/icons/hicolor || :
if [ -x %{_bindir}/gtk-update-icon-cache ]; then
   %{_bindir}/gtk-update-icon-cache --quiet %{_datadir}/icons/hicolor || :
fi

if [ -x %{_bindir}/update-desktop-database ]; then
    %{_bindir}/update-desktop-database
fi

if [ -x %{_bindir}/update-mime-database ]; then
    %{_bindir}/update-mime-database %{_datadir}/mime 2>&1 > /dev/null || :
fi


%clean
rm -rf %{buildroot}
rm -rf %{_builddir}/%{name}-%{version}-src


%files 
%defattr(0644, root, root, 0755)
%doc %{license_file} README

%attr(0755,root,root) %{_bindir}/mysql-workbench
%attr(0755,root,root) %{_bindir}/wbcopytables

%dir %{_libexecdir}/mysql-workbench
%attr(0755,root,root) %{_libexecdir}/mysql-workbench/mysql-workbench-bin
%attr(0755,root,root) %{_libexecdir}/mysql-workbench/wbcopytables-bin
%attr(0755,root,root) %{_libexecdir}/mysql-workbench/iodbcadm-gtk
%attr(0755,root,root) %{_libexecdir}/mysql-workbench/mysql
%attr(0755,root,root) %{_libexecdir}/mysql-workbench/mysqldump

%{_libdir}/mysql-workbench

%{_datadir}/mysql-workbench
%attr(0755,root,root) %{_datadir}/mysql-workbench/extras/*.sh

%{_datadir}/icons/hicolor/*/mimetypes/*
%{_datadir}/icons/hicolor/*/apps/*
%{_datadir}/mime-info/*
%{_datadir}/mime/packages/*
%{_datadir}/applications/*.desktop


%if 0%{?fedora} == 19
%debug_package
%endif

%changelog

